// Day 1 - Start

// Variables - holding the values
// syntax
var variableName = defaultValue;

var age = 10;
var user = 'Karthik';

// Viewing the values present inside variable
1. alert(age) => displays value in alert box
2. console.log(age) => prints value to the console.

var city;
alert(city) => undefined 
that means defaultValue is undefined

// Creating a boolean(true/false)
var isMale = true;

function 
	block of code
	code reduction
	re usability
	
// Creating a function - Approach 1
// syntax
function functionName(arguments) { 

	// return result if needed
}

function welcome(){
	console.log('Welcome to demo');
}

// executing function
// syntax
functionName(params);

welcome();

function add(x, y){
	var z = x + y;
	console.log(z);
}

add(10, 20) => prints 30

// returning the value from function
function add(x, y){
	var z = x + y;
	return z;
}
var sum = add(10,20)
alert(sum) => displays 30 in alert box

x and y are called arguments of the function
10 and 20 are called params to the function

Types
	boolean
	string
	number
	function
	undefined
	object
	
typeof(variableName or value) => returns type of value

typeof(age) => number
typeof(user) => string
typeof(isMale) => boolean
typeof(add) => function
typeof(city) => undefined

Ternary Operator
// syntax
var variableName = condition ? value1 : value2;

if condition is true
	variableName = value1;
else 
	variableName = value2;
	
var x = 5 > 10 ? 1 : 2;
x will be 2

var y = 100 > 5 ? 1 : 2;
y will be 1

// undefined handling
var a,b,c;

|| operator is used to handle undefined
var d = a || 50;
d will be 50 as a is undefined

var e = a || b || c || 90;
e will be 90

c = 80
e = a || b || c || 90;
e will be 80

function sub(x, y) {
	console.log('x is ' + x);
	console.log('y is ' + y);
	return x - y;
}

Anything with undefined will be NaN(Not a Number)
1 + undefined => NaN
1 - undefined => NaN
1 * undefined => NaN
1 / undefined => NaN

sub(10, 2) => 8
sub(10) => NaN
// if we are passing less params, it will undefined in arguments

function sub(x, y) {
	x = x || 0;
	y = y || 0;
	console.log('x is ' + x);
	console.log('y is ' + y);
	return x - y;
}

sub(10, 2, 1) => 8
// additional params will be ignored so 
	10 is copied to x
	2 is copied to y
	1 is ignored
	
// Comparison Operator
== compares only value
=== compares both value and type
1 == 1 will print true
1 == '1' will print true
1 === '1' will print false
1 === parseInt('1') will print true

parseInt => helper function exists in browser
	converts string to number
	
parseInt("100.9") => 100 => it is not trying for roundoff. It just removes the decimals.

parseFloat => converts string to float
parseFloat("100.9") => 100.9


// Creating a function - Approach 2
// syntax
var functionName = function(arguments) { 
	// return result if needed
}

var welcome = function(){
	console.log('Welcome to demo');
}

// executing function
// syntax
functionName(params);

welcome();

var div = function(x, y){
	var z = x / y;
	console.log(z);
	return z;
}
var result = div(10, 2);

// Day 1 - End

// Day 2 - Start
Object - Key value pair
	key - string, number
	value - number, boolean, string, object(nested), function

var karthik = {
	name: 'Karthik',
	age: 20,
	isMale: true
}

// accessing key value pair
alert(karthik.name);
alert(karthik['age']);

// adding key
karthik.city = 'Hyd';
karthik['address'] = 'kukatpally';

// overiding value
karthik.age = 30;

// delete 
delete karthik.address;

karthik.address = {
	line1: '1/2/3',
	line2: 'Kukatpally'
}

// print kukatpally
karthik.address.line2
karthik.address['line2']
karthik['address']['line2']
karthik['address'].line2

// Use cases
1. grouping the functions
var calculator = {
	add: function(x,y) {
		return x + y;
	}
}

var scientificCalculator = {
	add: function(x,y) {
		return x + y;
	}
}

calculator.sub = function(x, y){
	return x - y;
}

function welcome(name, age, city){
	name = name || '';
	age = age || '';
	city = city || '';
	console.log('Welcome to Demo ' + name + age + city )
}

function welcome2(options){
	console.log('Welcome to Demo ' + options.name + options.age + options.city )
}
welcome2({ name: 'karthik', age: 20, city:'Hyd'})
welcome2({ city:'Hyd'})

// handle undefined
function welcome3(options){
	options.name = options.name || '';
	options.age = options.age || '';
	options.city = options.city || '';
	console.log('Welcome to Demo ' + options.name + options.age + options.city )
}
welcome3({ city:'Hyd'})

// set default Values
function welcome4(options){
	options = options || {};
	options.name = options.name || 'Guest';
	options.age = options.age || '0';
	options.city = options.city || 'Delhi';
	console.log('Welcome to Demo ' + options.name + options.age + options.city )
}
welcome4()

JSON.stringify converts object to string 
var response = JSON.stringify(karthik)

JSON.parse converts string to object
var obj = JSON.parse(response)

var obj2 = { 1: 'a', 2: 'b'}

obj2.1 throws exception as key of type number cant be accessed using .
obj2['1'] returns a

// Can use _ symbol for string key
var neha = {
	first_name: 'Neha',
	last_name: 'Singh'
}
// Day 2 - End

// Day 3 - Start

Array
	Collection 
	Its an Object, where keys are numeric, starts with 0, increments by 1. usually we can key as index.
	
var numbers = [1, 2, 3, 4, 5];

// Accessing values
numbers[0] returns 1
numbers[1] => 2
numbers[2] => 3
numbers[3] => 4
numbers[4] => 5
numbers[5] => undefined. it doesnt throws exception

var students = ['Neha', 'Prakash', 'Veena']

// Iterating Arrays
// Approach 1 - For
for(var index = 0; index < students.length; index ++){
	console.log(index);
	var student = students[index];
	console.log(student)
}

// Approach 2 - For In - Iterating by Index
for(var index in students){
	console.log(index);
	var student = students[index];
	console.log(student)
}

// Approach 3 - For of - Iterating by item
for(var student of students){
	console.log(student)
}

// Adding item to array
students.push('Deepak')

// deleting item from array
students.pop() => removes last element or recently added element

var persons = [
	{ name: 'Vishnu', age: 20, city: 'Hyderabad' },
	{ name: 'Deepa', age: 30, city: 'Hyderabad' },
	{ name: 'Manish', age: 25, city: 'Delhi' },
	{ name: 'Preethi', city: 'Vizag' }
]

// printing persons
for(var item of persons){
	console.log('Welcome to Demo, ' + item.name + ',' + item.age + ',' + item.city);
}

// printing persons from Hyderabad
for(var item of persons){
	if(item.city == 'Hyderabad')
	console.log('Welcome to Demo, ' + item.name + ',' + item.age + ',' + item.city);
}

// printing persons from Hyderabad and age is 20
for(var item of persons){
	if(item.city == 'Hyderabad' && item.age == 20)
	console.log('Welcome to Demo, ' + item.name + ',' + item.age + ',' + item.city);
}

// Array having elements of different types
var array = [ 'Neha', 20, false, undefined, function() { console.log('Welcome')} ];

array[0] => Neha
array[4] => function
array[4]() => Welcome






Note: need to show collision of methods in html
















